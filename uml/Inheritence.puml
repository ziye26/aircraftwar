@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft{
    # hp : int
    # shootNum : int
    # direction : int
    # power : int
    # shootStrategy : ShootStrategy

    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + getShootNum() : int
    + setShootNum(int shootNum) : void
    + getDirection() : int
    + getPower() : int
    + decreaseHp(int decrease) : void
    + getHp() : int
    + SetShootStrategy(ShootStrategy shootStrategy) : void
    + {abstract} shoot() : List<BaseBullet>
    + setHp(int hp) : void
}


abstract class BaseProp {
    + BaseProp(int locationX,int locationY,int speedX,int speedY)
    + forward(): void
    + {abstract}Active(HeroAircraft a): void
}

class HeroAircraft extends AbstractAircraft{
    - {static} instance: HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static} getInstance(): HeroAircraft
    + forward(): void
    + shoot(): List<BaseBullet>
}

HeroAircraft::instance -[hidden]-> HeroAircraft
HeroAircraft::instance -left-> HeroAircraft

abstract class BaseEnemy {
    + BaseEnemy(locationX: int, locationY: int, speedX: int, speedY: int, hp: int)
    + shoot() : List<BaseBullet>
    + createProp() : List<BaseProp>
}
AbstractAircraft <|-- BaseEnemy

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward() : void
    + createProp() : List<BaseProp>
    + shoot() : List<BaseBullet>
    + update() : void
}
BaseEnemy <|-- MobEnemy

class EliteEnemy {
    +EliteEnemy(locationX: int, locationY: int, speedX: int, speedY: int, hp: int)
    +forward(): void
    +createProp(): List<BaseProp>
    +shoot(): List<BaseBullet>
    +update(): void
}
BaseEnemy <|-- EliteEnemy

class Boss extends BaseEnemy {
    - {static} flag:int
    + Boss(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + vanish():void
    + {static} getExistence():boolean
    + createProp() :List<BaseProp>
    + shoot() : List<BaseBullet>
    + update() :void
}

class ElitePlusEnemy extends BaseEnemy {
    + ElitePlusEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward() : void
    + createProp() : List<BaseProp>
    + shoot() : List<BaseBullet>
    + update() : void
}

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
     + update(): void
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
    + update(): void
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

class BloodProp {
    - AddHp:int
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + getAddHp():int
    + Active(HeroAircraft a): void
}
class BombProp {
    -Observers: List<Observer>
    +addObserver(Observer observer): void
    +removeBaseEnemy(Observer observer): void
    +getObserversDestroy(): int
    +notifyall(): void
    +BombProp(int locationX,int locationY, int speedX, int speedY)
    + Active(HeroAircraft a): void
}
class BulletProp {
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
    + Active(HeroAircraft a): void
}

class BulletPlusProp extends BaseProp {
    + BulletPlusProp(int locationX, int locationY, int speedX, int speedY)
    + Active(HeroAircraft a) : void
}

BaseProp <|-- BombProp
BaseProp <|-- BloodProp
BaseProp <|-- BulletProp

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProp

@enduml