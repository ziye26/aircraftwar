@startuml
' 设置类的样式

interface EnemyFactory {
    + {abstract} createEnemy() : BaseEnemy
}

class EliteEnemyFactory {
    + EliteEnemyFactory()
    + createEnemy() : BaseEnemy
}

class MobEnemyFactory {
    + MobEnemyFactory()
    + createEnemy() : BaseEnemy
}

class ElitePlusEnemyFactory implements EnemyFactory {
    + ElitePlusEnemyFactory()
    + createEnemy() : BaseEnemy
}


abstract class BaseEnemy {
    + BaseEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot() : List<BaseBullet>
    + createProp() : List<BaseProp>
}




class EliteEnemy {
    +EliteEnemy(locationX: int, locationY: int, speedX: int, speedY: int, hp: int)
    +forward(): void
    +createProp(): List<BaseProp>
    +shoot(): List<BaseBullet>
    +update(): void
}

class Boss extends BaseEnemy {
    - {static} flag : int

    + Boss(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward(): void
    + vanish(): void
    + createProp(): List<BaseProp>
    + shoot(): List<BaseBullet>
    + {static} getExistence(): boolean
    + update(): void
}
class ElitePlusEnemy extends BaseEnemy {
    + ElitePlusEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward() : void
    + createProp() : List<BaseProp>
    + shoot() : List<BaseBullet>
    + update() : void
}

class BossFactory implements EnemyFactory {
    +BossFactory()
    +createEnemy() : BaseEnemy
}


BaseEnemy <|-- EliteEnemy
class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + createProp() : List<BaseProp>
    +update(): void
}
BaseEnemy <|-- MobEnemy


' 继承关系


EnemyFactory <|.. EliteEnemyFactory
EnemyFactory <|.. MobEnemyFactory
' 工厂模式示意


EliteEnemyFactory ..> EliteEnemy : <<create>>
MobEnemyFactory ..> MobEnemy : <<create>>
EnemyFactory ..> BaseEnemy : <<create>>
BossFactory ..> Boss : <<create>>
ElitePlusEnemyFactory ..> ElitePlusEnemy : <<create>>


@enduml
